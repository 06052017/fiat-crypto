λ x : word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x3, x4, x2)%core,
 uint64_t x5 = (x4 | x3);
 uint64_t x6 = (x2 | x5);
 return x6)
x
     : word64 * word64 * word64 → ReturnType (Tbase match (if match match (let (lower, _) := Synthesis.P.bound1 in
                                                                           lower) with
                                                                    | 0%Z => Eq
                                                                    | Z.pos _ => Lt
                                                                    | Z.neg _ => Gt
                                                                    end with
                                                              | Eq => true
                                                              | Lt => true
                                                              | Gt => false
                                                              end then Some 6 else None) with
                                                    | Some lgsz => Syntax.TWord lgsz
                                                    | None => Syntax.TZ
                                                    end)
