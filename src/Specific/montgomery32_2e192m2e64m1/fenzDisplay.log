λ x : word32 * word32 * word32 * word32 * word32 * word32,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x9, x10, x8, x6, x4, x2)%core,
 uint32_t x11 = (x10 | x9);
 uint32_t x12 = (x8 | x11);
 uint32_t x13 = (x6 | x12);
 uint32_t x14 = (x4 | x13);
 uint32_t x15 = (x2 | x14);
 return x15)
x
     : word32 * word32 * word32 * word32 * word32 * word32 → ReturnType (Tbase match (if match match (let (lower, _) := Synthesis.P.bound1 in
                                                                                                      lower) with
                                                                                               | 0%Z => Eq
                                                                                               | Z.pos _ => Lt
                                                                                               | Z.neg _ => Gt
                                                                                               end with
                                                                                         | Eq => true
                                                                                         | Lt => true
                                                                                         | Gt => false
                                                                                         end then Some 5 else None) with
                                                                               | Some lgsz => Syntax.TWord lgsz
                                                                               | None => Syntax.TZ
                                                                               end)
