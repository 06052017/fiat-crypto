λ x : word32 * word32 * word32 * word32,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x5, x6, x4, x2)%core,
 uint32_t x7 = (x6 | x5);
 uint32_t x8 = (x4 | x7);
 uint32_t x9 = (x2 | x8);
 return x9)
x
     : word32 * word32 * word32 * word32 → ReturnType (Tbase match (if match match (let (lower, _) := Synthesis.P.bound1 in
                                                                                    lower) with
                                                                             | 0%Z => Eq
                                                                             | Z.pos _ => Lt
                                                                             | Z.neg _ => Gt
                                                                             end with
                                                                       | Eq => true
                                                                       | Lt => true
                                                                       | Gt => false
                                                                       end then Some 5 else None) with
                                                             | Some lgsz => Syntax.TWord lgsz
                                                             | None => Syntax.TZ
                                                             end)
